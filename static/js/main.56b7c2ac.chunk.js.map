{"version":3,"sources":["components/Header.js","components/Navbar.js","components/SimpsonsCard/SimpsonsCard.js","components/Title/Title.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Navbar","props","href","correctGuess","score","highScore","SimpsonsCard","onClick","registerClick","id","alt","name","src","image","Title","children","Wrapper","App","state","Simpsons","clicked","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleIncrement","_this","setState","character","filter","Simpson","resetSimpsons","map","simpsonsShuffle","_this2","this","components_Wrapper_Wrapper","components_Navbar","components_Title_Title","components_Header","components_SimpsonsCard_SimpsonsCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56b7c2ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Header.css\";\n\n// We use JSX curly braces to evaluate the style object\n\nconst Header = () => (\n  <header  className=\"header\">\n    <h1>Clicky Game!</h1>\n    <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"../styles/Navbar.css\";\n\nconst CardBody = props => (\n  <div className=\"card-body\">\n    <p className=\"card-text\">Click Count: {props.count}</p>\n    <button className=\"btn btn-primary\" onClick={props.handleIncrement}>\n      Increment\n    </button>{\" \"}\n    <button className=\"btn btn-danger\" onClick={props.handleDecrement}>\n      Decrement\n    </button>\n  </div>\n);\n\n\nconst Navbar = (props) => (\n  <nav className=\"navbar navbar-default\">\n    <div className=\"navbar-home\">\n      <h2 href=\"/\">Clicky Game</h2>\n    </div>\n    <div className=\"navbar-status\">\n      <h2>{props.correctGuess}</h2>\n    </div>\n    <div className=\"navbar-score\">\n      <h2>Score: {props.score}</h2>\n      <h2>High Score: {props.highScore}</h2>\n    </div>\n    \n</nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./SimpsonsCard.css\";\n\nconst SimpsonsCard = props => (\n  <div className=\"card\" >\n\n    <span className=\"img-container\" onClick={() => props.registerClick(props.id)}>\n      <img className= \"image\" alt={props.name} src={props.image} />\n    </span>\n   \n  </div>\n);\n\nexport default SimpsonsCard;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, {Component} from \"react\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport SimpsonsCard from \"./components/SimpsonsCard\";\nimport Simpsons from \"./Simpsons.json\";\nimport Title from \"./components/Title\";\n\nimport Wrapper from \"./components/Wrapper\";\n\n\nclass App extends Component {\n  // Setting this.state.Simpsons to the Simpsons json array\n  state = {\n    Simpsons,\n    score: 0,\n    highScore: 0,\n    correctGuess: \"\",\n    clicked: []\n  };\n\n   // This shuffle is based on the Fisher-Yates shuffle and was found at https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ score: this.state.score + 1 });\n\n    if (this.state.score >= this.state.highScore){\n      this.setState({ highScore: this.state.highScore + 1 });\n    }\n  };\n\n\n  registerClick = id => {\n    // gets the character by ID\n    const character = this.state.Simpsons.filter(Simpson => Simpson.id === id)[0];\n   \n\n    if (character.clicked === true){\n      this.setState({correctGuess: \"D'Oh! You guessed wrong\"});\n      this.setState({score: 0});\n      const resetSimpsons = this.state.Simpsons;\n      resetSimpsons.map(Simpson => Simpson.clicked = false);\n      this.setState({Simpsons: resetSimpsons});   \n      // console.log(Simpsons);\n\n    }else{\n      this.setState({correctGuess: \"Woo Hoo! You guessed right!\"});\n      this.handleIncrement();\n      character.clicked = true;\n      // console.log(Simpsons);\n\n    }\n    \n    const simpsonsShuffle = this.shuffle(Simpsons);\n    // Set this.state.Simpsons equal to the new Simpsons array\n    this.setState({ simpsonsShuffle });\n  };\n\n  \n\n  // Map over this.state.Simpsons and render a SimpsonCard component for each Simpson object\n  render() {\n    return (\n      \n\n      <Wrapper>\n      <Navbar score= {this.state.score}\n    highScore= {this.state.highScore}\n    correctGuess= {this.state.correctGuess} />\n      <Title>The Simpsons</Title>\n      <Header/>\n        \n        {this.state.Simpsons.map(Simpson => (\n          <SimpsonsCard\n            registerClick={this.registerClick}\n            id={Simpson.id}\n            key={Simpson.id}\n            name={Simpson.name}\n            image={Simpson.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}